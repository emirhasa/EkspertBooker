// <auto-generated />
using System;
using EkspertBooker.WebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EkspertBooker.WebAPI.Migrations
{
    [DbContext(typeof(EkspertBookerContext))]
    [Migration("20200131194557_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Ekspert", b =>
                {
                    b.Property<int>("EkspertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojZavrsenihProjekata");

                    b.Property<int>("KorisnikUlogaId");

                    b.Property<float>("ProsjecnaOcjena");

                    b.HasKey("EkspertId");

                    b.HasIndex("KorisnikUlogaId");

                    b.ToTable("Eksperti");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50);

                    b.HasKey("KategorijaId");

                    b.ToTable("Kategorije");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Ime");

                    b.Property<string>("KorisnickoIme");

                    b.Property<string>("LozinkaHash");

                    b.Property<string>("LozinkaSalt");

                    b.Property<string>("Prezime");

                    b.Property<byte[]>("Slika");

                    b.Property<string>("Telefon");

                    b.HasKey("KorisnikId");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikId");

                    b.Property<int>("UlogaId");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Poslodavac", b =>
                {
                    b.Property<int>("PoslodavacId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojZavrsenihProjekata");

                    b.Property<int>("KorisnikUlogaId");

                    b.Property<float>("ProsjecnaOcjena");

                    b.HasKey("PoslodavacId");

                    b.HasIndex("KorisnikUlogaId");

                    b.ToTable("Poslodavci");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Projekt", b =>
                {
                    b.Property<int>("ProjektId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Budzet");

                    b.Property<DateTime?>("DatumObjave");

                    b.Property<DateTime?>("DatumPocetka");

                    b.Property<DateTime?>("DatumZavrsetka");

                    b.Property<string>("DetaljniOpis");

                    b.Property<int?>("EkspertId");

                    b.Property<bool?>("Hitan");

                    b.Property<int>("KategorijaId");

                    b.Property<string>("KratkiOpis")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PoslodavacId");

                    b.Property<string>("StanjeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TrajanjeDana");

                    b.HasKey("ProjektId");

                    b.HasIndex("EkspertId");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("PoslodavacId");

                    b.HasIndex("StanjeId");

                    b.ToTable("Projekti");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.ProjektDetalji", b =>
                {
                    b.Property<int>("ProjektDetaljiId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AktivanDetaljanOpis");

                    b.Property<string>("Napomena");

                    b.Property<int>("ProjektId");

                    b.HasKey("ProjektDetaljiId");

                    b.HasIndex("ProjektId")
                        .IsUnique();

                    b.ToTable("ProjektDetalji");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Stanje", b =>
                {
                    b.Property<string>("StanjeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.HasKey("StanjeId");

                    b.ToTable("Stanja");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UlogaId");

                    b.ToTable("Uloge");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Ekspert", b =>
                {
                    b.HasOne("EkspertBooker.WebAPI.Database.KorisnikUloga", "KorisnikUloga")
                        .WithMany()
                        .HasForeignKey("KorisnikUlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.KorisnikUloga", b =>
                {
                    b.HasOne("EkspertBooker.WebAPI.Database.Korisnik", "Korisnik")
                        .WithMany("KorisnikUloge")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Korisnici_KorisniciUloge")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EkspertBooker.WebAPI.Database.Uloga", "Uloga")
                        .WithMany("KorisniciUloga")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK_Uloge_KorisniciUloge")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Poslodavac", b =>
                {
                    b.HasOne("EkspertBooker.WebAPI.Database.KorisnikUloga", "KorisnikUloga")
                        .WithMany()
                        .HasForeignKey("KorisnikUlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.Projekt", b =>
                {
                    b.HasOne("EkspertBooker.WebAPI.Database.Ekspert", "Ekspert")
                        .WithMany("Projekti")
                        .HasForeignKey("EkspertId");

                    b.HasOne("EkspertBooker.WebAPI.Database.Kategorija", "Kategorija")
                        .WithMany("Projekti")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Projekti_Kategorije");

                    b.HasOne("EkspertBooker.WebAPI.Database.Poslodavac", "Poslodavac")
                        .WithMany("Projekti")
                        .HasForeignKey("PoslodavacId");

                    b.HasOne("EkspertBooker.WebAPI.Database.Stanje", "Stanje")
                        .WithMany("Projekti")
                        .HasForeignKey("StanjeId")
                        .HasConstraintName("FK_Projekti_Stanja");
                });

            modelBuilder.Entity("EkspertBooker.WebAPI.Database.ProjektDetalji", b =>
                {
                    b.HasOne("EkspertBooker.WebAPI.Database.Projekt", "Projekt")
                        .WithOne("ProjektDetalji")
                        .HasForeignKey("EkspertBooker.WebAPI.Database.ProjektDetalji", "ProjektId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
